/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/roles/{roleCode}': {
    /**
     * Amend role name
     * @description Amend the role name, role required is ROLE_ROLES_ADMIN
     */
    put: operations['amendRoleName']
  }
  '/roles/{roleCode}/description': {
    /**
     * Amend role description
     * @description Amend the role description, role required is ROLE_ROLES_ADMIN
     */
    put: operations['amendRoleDescription']
  }
  '/roles/{roleCode}/admintype': {
    /**
     * Amend role admin type
     * @description Amend the role admin type, role required is ROLE_ROLES_ADMIN
     */
    put: operations['amendRoleAdminType']
  }
  '/prisonusers/{username}/enable-user': {
    /**
     * Unlock user account
     * @description Unlocks the user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    put: operations['enableUser']
  }
  '/prisonusers/{username}/disable-user': {
    /**
     * Lock user account
     * @description Locks the user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    put: operations['disableUser']
  }
  '/groups/{group}': {
    /**
     * Group detail.
     * @description return Group Details
     */
    get: operations['getGroupDetail']
    /**
     * Amend group name.
     * @description Amend group name.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
     */
    put: operations['amendGroupName']
    /**
     * Delete group.
     * @description Delete a Group.<br.>Requires role ROLE_MAINTAIN_OAUTH_USERS
     */
    delete: operations['deleteGroup']
  }
  '/groups/child/{group}': {
    /**
     * Child Group detail.
     * @description Fetches child group details.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
     */
    get: operations['getChildGroupDetail']
    /**
     * Amend child group name.
     * @description Amend a Child Group Name.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
     */
    put: operations['amendChildGroupName']
    /**
     * Delete child group.
     * @description Delete a child group.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
     */
    delete: operations['deleteChildGroup']
  }
  '/externalusers/{userId}/roles/{role}': {
    /**
     * Add role to user.
     * @description Add role to user. Requires role ROLE_MAINTAIN_OAUTH_USERS, ROLE_AUTH_GROUP_MANAGER or ROLE_MAINTAIN_IMS_USERS
     */
    put: operations['addRoleByUserId']
    /**
     * Remove role from user.
     * @description Remove role from user.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS , ROLE_AUTH_GROUP_MANAGER or ROLE_MAINTAIN_IMS_USERS
     */
    delete: operations['removeRoleByUserId']
  }
  '/externalusers/{userId}/groups/{group}': {
    /**
     * Add group to user.
     * @description Add group to user. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
     */
    put: operations['addGroupByUserId']
    /**
     * Remove group from user.
     * @description Remove group from user. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
     */
    delete: operations['removeGroupByUserId']
  }
  '/externalusers/{userId}/enable': {
    /**
     * Enable a user.
     * @description Enable a user. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
     */
    put: operations['enableUserByUserId']
  }
  '/externalusers/{userId}/disable': {
    /**
     * Disable a user.
     * @description Disable a user. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
     */
    put: operations['disableUserByUserId']
  }
  '/roles': {
    /**
     * Get all roles
     * @description Get all roles, role required is ROLE_ROLES_ADMIN (to find external roles), ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    get: operations['getRoles']
    /**
     * Create role
     * @description Create a new role, role required is ROLE_ROLES_ADMIN
     */
    post: operations['createRole']
  }
  '/prisonusers': {
    /**
     * Find prison users by first and last name.
     * @description Find prison users by first and last name. Requires role ROLE_USE_OF_FORCE or ROLE_STAFF_SEARCH
     */
    get: operations['findUsersByFirstAndLastName']
    /**
     * Create a DPS user
     * @description Creates a specific DPS user. Requires role ROLE_CREATE_USER
     */
    post: operations['createUser']
  }
  '/prisonusers/{username}/roles': {
    /**
     * Get list of roles associated with the users account
     * @description Roles for a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    get: operations['getUserRoles']
    /**
     * Add a role to the specified user account, all roles will be added to DPS caseload unless specified
     * @description Adds a role to a user, user must have caseload (if specified). Default caseload is DPS caseload (NWEB).  Cannot add an existing role to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    post: operations['addRoles']
  }
  '/prisonusers/{username}/email': {
    /**
     * Amend a prison user email address.
     * @description Amend a prison user email address. Requires role MAINTAIN_ACCESS_ROLES_ADMIN
     */
    post: operations['amendUserEmail']
  }
  '/prisonusers/{username}/email/sync': {
    /**
     * Sync Nomis user email back into Auth
     * @description Run process to check for differences in email address between Auth and NOMIS and updates Auth if required.<br/> Requires role ROLE_MAINTAIN_ACCESS_ROLES or ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
     */
    post: operations['syncUserEmail']
  }
  '/prisonusers/{username}/caseloads': {
    /**
     * Get list of caseloads associated with the users account
     * @description Caseloads for a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES"
     */
    get: operations['getUserCaseloads']
    /**
     * Add multiple caseloads to the specified user account
     * @description Adds caseloads to a user, caseloads must exist. Cannot add an existing caseload to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
     */
    post: operations['addCaseloads']
  }
  '/linkedprisonusers/lsa': {
    /**
     * Link a Local Admin User to an existing General Account
     * @description Link a Local Admin User to an existing General Account. Requires role ROLE_CREATE_USER
     */
    post: operations['createLinkedLocalAdminUser']
  }
  '/linkedprisonusers/general': {
    /**
     * Link a New General User to an existing Admin Account
     * @description Link a New General User to an existing Admin Account. Requires role ROLE_CREATE_USER
     */
    post: operations['createLinkedGeneralUser']
  }
  '/linkedprisonusers/admin': {
    /**
     * Link an Admin User to an existing General Account
     * @description Link an Admin User to an existing General Account. Requires role ROLE_CREATE_USER
     */
    post: operations['createLinkedCentralAdminUser']
  }
  '/groups': {
    /**
     * Get all groups
     * @description Get all groups, role required is ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
     */
    get: operations['getGroups']
    /**
     * Create group.
     * @description Create a group.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
     */
    post: operations['createGroup']
  }
  '/groups/child': {
    /**
     * Create child group.
     * @description Create a Child Group.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
     */
    post: operations['createChildGroup']
  }
  '/externalusers/{userId}/roles': {
    /**
     * Get list of roles associated with the users account
     * @description Roles for a specific user.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS, ROLE_AUTH_GROUP_MANAGER or ROLE_MAINTAIN_IMS_USERS
     */
    get: operations['getUserRoles_1']
    /**
     * Add roles to user.
     * @description Add role to user, post version taking multiple roles<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS, ROLE_AUTH_GROUP_MANAGER or ROLE_MAINTAIN_IMS_USERS
     */
    post: operations['addRolesByUserId']
  }
  '/externalusers/{userId}/email': {
    /**
     * Amend a user email address.
     * @description Amend a user email address. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
     */
    post: operations['alterUserEmail']
  }
  '/externalusers/create': {
    /**
     * Create user
     * @description Create user. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
     */
    post: operations['createUserByEmail']
  }
  '/email-domains': {
    /**
     * Get all email domains
     * @description Get all email domains, role required is ROLE_MAINTAIN_EMAIL_DOMAINS
     */
    get: operations['domainList']
    /**
     * Create email domain
     * @description Create a new email domain, role required is ROLE_MAINTAIN_EMAIL_DOMAINS
     */
    post: operations['addEmailDomain']
  }
  '/users/{username}': {
    /**
     * User detail.
     * @description Find user detail by username.
     */
    get: operations['findUser']
  }
  '/users/{username}/roles': {
    /**
     * List of roles for user
     * @description List of roles for user. Currently restricted to service specific roles: ROLE_INTEL_ADMIN or ROLE_PF_USER_ADMIN or ROLE_PCMS_USER_ADMIN.<br/><br/>**Change to old endpoint in Auth** <br/> 1)  Nomis / Prison user doesn't return additional role in the list:  PRISON <br/>                                         2)  Delius user doesn't return additional role in the list:  PROBATION
     */
    get: operations['userRoles']
  }
  '/users/{username}/email': {
    /**
     * Email address for user
     * @description Verified email address for user
     */
    get: operations['getUserEmail']
  }
  '/users/search': {
    /**
     * Search for users
     * @description
     *       Search for users in the Auth DB only who match on partial first name, surname, username or email and return a pageable result set.
     *       Optionally choose the authentication sources from any combination of auth, delius, nomis and azuread sources.
     *       Provide the authSources as a list of values with the same name. e.g. ?authSources=nomis&authSources=delius&authSources=auth
     *       It will return users with the requested auth sources where they have authenticated against the auth service at least once.
     *       Note: User information held in the auth service may be out of date with the user information held in the source systems as
     *       their details will be as they were the last time that they authenticated.<br/><br/>
     *
     *        Requires role ROLE_INTEL_ADMIN or ROLE_PCMS_USER_ADMIN or ROLE_PF_USER_ADMIN
     */
    get: operations['searchForUsersInMultipleSourceSystems']
  }
  '/users/me': {
    /**
     * My User details.
     * @description Find my user details.
     */
    get: operations['myDetails']
  }
  '/users/me/roles': {
    /**
     * List of roles for current user.
     * @description List of roles for current user.
     */
    get: operations['myRoles']
  }
  '/users/me/groups': {
    /**
     * My Group details.
     * @description Find my location/group details. This should be accessed with user token.
     */
    get: operations['myGroupDetails']
  }
  '/users/me/email': {
    /**
     * Email address for current user
     * @description Verified email address for current user
     */
    get: operations['myEmail']
  }
  '/users/me/caseloads': {
    /**
     * Get list of caseloads associated with the current user
     * @description Caseloads for the current user
     */
    get: operations['getMyCaseloads']
  }
  '/roles/{role}': {
    /**
     * Get role details
     * @description Get role details, role required is ROLE_ROLES_ADMIN
     */
    get: operations['getRoleDetail']
  }
  '/roles/paged': {
    /**
     * Get all paged roles
     * @description Get all paged roles, role required is ROLE_ROLES_ADMIN
     */
    get: operations['getPagedRoles']
  }
  '/roles/delius': {
    /**
     * List of mapped delius roles
     * @description List of mapped  delius roles. Requires role ROLE_INTEL_ADMIN or ROLE_PCMS_USER_ADMIN or ROLE_PF_USER_ADMIN
     */
    get: operations['findMappedDeliusRoles']
  }
  '/prisonusers/{username}': {
    /**
     * Get specified user details
     * @description Information on a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES or ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    get: operations['findUserByUsername']
  }
  '/prisonusers/{username}/details': {
    /**
     * Get specified user details
     * @description Information on a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES or ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    get: operations['getUserDetails']
  }
  '/prisonusers/search': {
    /**
     * Get all users filtered as specified
     * @description Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES. <br/>Get all users with filter.<br/> For local administrators this will implicitly filter users in the prisons they administer, therefore username is expected in the authorisation token. <br/>For users with role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN this allows access to all staff.
     */
    get: operations['getUsers']
  }
  '/prisonusers/reference-data/caseloads': {
    /**
     * Retrieves all caseloads
     * @description Retrieves all the current active general caseloads, these are effectively prisons that staff can be associated with.
     */
    get: operations['getCaseload']
  }
  '/prisonusers/download': {
    get: operations['downloadUsersByFilters']
  }
  '/prisonusers/download/admins': {
    get: operations['downloadPrisonAdminsByFilter']
  }
  '/notification/banner/{page}': {
    /**
     * Gets Notification message
     * @description Message string to be displayed in the notification banner.
     */
    get: operations['getNotificationBannerMessage']
  }
  '/externalusers': {
    /**
     * Search for a user.
     * @description Search for a user.
     */
    get: operations['searchForUser']
  }
  '/externalusers/{username}': {
    /**
     * User detail.
     * @description User detail.
     */
    get: operations['user']
  }
  '/externalusers/{userId}/groups': {
    /**
     * Get groups for userId.
     * @description Get groups for userId. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER or ROLE_VIEW_USER_GROUPS
     */
    get: operations['getGroups_1']
  }
  '/externalusers/{userId}/assignable-roles': {
    /**
     * Get list of roles associated with the users account
     * @description Roles for a specific user. Requires role ROLE_MAINTAIN_OAUTH_USERS, ROLE_AUTH_GROUP_MANAGER, ROLE_MAINTAIN_IMS_USERS
     */
    get: operations['getAssignableRoles']
  }
  '/externalusers/search': {
    /** Search for an external user. */
    get: operations['searchForUser_1']
  }
  '/externalusers/me/searchable-roles': {
    /**
     * Get list of searchable roles.
     * @description Get list of roles that can be search for by the current user.
     */
    get: operations['searchableRoles']
  }
  '/externalusers/me/assignable-groups': {
    /**
     * Get list of assignable groups.
     * @description Get list of groups that can be assigned by the current user.
     */
    get: operations['assignableGroups']
  }
  '/externalusers/id/{userId}': {
    /**
     * Retrieve user details by user id.
     * @description Retrieve detail by user id. Note that when accessing with Group Manager role the accessor must have a group in common with the user.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
     */
    get: operations['userById']
  }
  '/email-domains/{id}': {
    /**
     * Get email domain details
     * @description Get email domain details, role required is ROLE_MAINTAIN_EMAIL_DOMAINS
     */
    get: operations['domain']
    /**
     * Delete email domain details
     * @description Delete email domain details, role required is ROLE_MAINTAIN_EMAIL_DOMAINS
     */
    delete: operations['deleteEmailDomain']
  }
  '/prisonusers/{username}/roles/{roleCode}': {
    /**
     * Remove a role from a user
     * @description The user must already have the role to be removed. Default role caseload is a DPS role unless specified. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    delete: operations['removeRoleFromUser']
  }
  '/prisonusers/{username}/caseloads/{caseloadId}': {
    /**
     * Remove a caseload from a user
     * @description The user must already have the caseload to be removed. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
     */
    delete: operations['removeCaseload']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @description Update Role Name */
    RoleNameAmendmentDto: {
      /**
       * @description Role Name
       * @example Auth Group Manager
       */
      roleName: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      errors?: string[]
    }
    /** @description Update Role Description */
    RoleDescriptionAmendmentDto: {
      /**
       * @description Role Description
       * @example Allow Group Manager to administer the account within their groups
       */
      roleDescription: string
    }
    /** @description Update Role Administration Types */
    RoleAdminTypeAmendmentDto: {
      /**
       * @description Role Admin Type
       * @example [
       *   "DPS_ADM"
       * ]
       */
      adminType: ('DPS_LSA' | 'DPS_ADM' | 'EXT_ADM')[]
    }
    /** @description Group Name */
    GroupAmendmentDto: {
      /**
       * @description Group Name
       * @example HDC NPS North East
       */
      groupName: string
    }
    /** @description The reason user made inactive. */
    DeactivateReason: {
      /**
       * @description Deactivate Reason
       * @example User has left
       */
      reason: string
    }
    /** @description DPS User creation */
    CreateUserRequest: {
      /**
       * @description Username
       * @example TEST_USER
       */
      username: string
      /**
       * @description Email Address
       * @example test@justice.gov.uk
       */
      email: string
      /**
       * @description First name of the user
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user
       * @example Smith
       */
      lastName: string
      /**
       * @description The type of user
       * @example DPS_LSA
       * @enum {string}
       */
      userType: 'DPS_ADM' | 'DPS_GEN' | 'DPS_LSA'
      /**
       * @description Default caseload (a.k.a Prison ID)
       * @example BXI
       */
      defaultCaseloadId?: string
    }
    /** @description Prison User Created Details */
    NewPrisonUserDto: {
      /**
       * @description Username
       * @example TEST_USER
       */
      username: string
      /**
       * @description Email Address
       * @example test@justice.gov.uk
       */
      primaryEmail?: string
      /**
       * @description First name of the user
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user
       * @example Smith
       */
      lastName: string
    }
    /** @description Roles in caseload information */
    CaseloadRoleDetail: {
      caseload: components['schemas']['PrisonCaseload']
      /** @description NOMIS Roles assigned to this user */
      roles: components['schemas']['RoleDetail'][]
    }
    /** @description Caseload for the listed roles */
    PrisonCaseload: {
      /**
       * @description identify for caseload
       * @example WWI
       */
      id: string
      /**
       * @description name of caseload, typically prison name
       * @example WANDSWORTH (HMP)
       */
      name: string
    }
    /** @description Role Information */
    RoleDetail: {
      /**
       * @description Role Code
       * @example GLOBAL_SEARCH
       */
      code: string
      /**
       * @description Role Name
       * @example Global Search Role
       */
      name: string
      /**
       * Format: int32
       * @description Role Sequence
       * @default 1
       * @example 1
       */
      sequence?: number
      /**
       * @description Role Type
       * @default APP
       * @example APP
       * @enum {string}
       */
      type?: 'APP' | 'INST' | 'COMM'
      /**
       * @description Admin only role
       * @default false
       * @example true
       */
      adminRoleOnly?: boolean
      parentRole?: components['schemas']['RoleDetail']
    }
    /** @description User & Role Information */
    UserRoleDetail: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description Indicates that the user is active
       * @example true
       */
      active: boolean
      /**
       * @description Type of user account
       * @example GENERAL
       * @enum {string}
       */
      accountType: 'GENERAL' | 'ADMIN'
      activeCaseload?: components['schemas']['PrisonCaseload']
      /** @description DPS Roles assigned to this user */
      dpsRoles: components['schemas']['RoleDetail'][]
      /** @description NOMIS Roles assigned to this user per caseload */
      nomisRoles?: components['schemas']['CaseloadRoleDetail'][]
    }
    AmendEmail: {
      /**
       * @description Email address
       * @example prison.user@someagency.justice.gov.uk
       */
      email: string
    }
    /** @description User & Caseload Information */
    UserCaseloadDetail: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description Indicates that the user is active
       * @example true
       */
      active: boolean
      /**
       * @description Type of user account
       * @example GENERAL
       * @enum {string}
       */
      accountType: 'GENERAL' | 'ADMIN'
      activeCaseload?: components['schemas']['PrisonCaseload']
      /** @description Caseloads available for this user */
      caseloads: components['schemas']['PrisonCaseload'][]
    }
    /** @description Linking a new Local admin account to an existing general user */
    CreateLinkedLocalAdminUserRequest: {
      /**
       * @description existingUsername
       * @example TESTUSER1
       */
      existingUsername: string
      /**
       * @description adminUsername
       * @example TESTUSER1_ADM
       */
      adminUsername: string
      /**
       * @description Default local admin group (prison) to manage users
       * @example MDI
       */
      localAdminGroup: string
    }
    /** @description Caseloads available for this user */
    PrisonCaseloadDto: {
      /**
       * @description ID for the caseload
       * @example WWI
       */
      id: string
      /**
       * @description name of caseload, typically prison name
       * @example WANDSWORTH (HMP)
       */
      name: string
    }
    /** @description Prison Staff Information */
    PrisonStaffUserDto: {
      /**
       * Format: int64
       * @description Staff ID
       * @example 324323
       */
      staffId: number
      /**
       * @description First name of the user
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user
       * @example Smith
       */
      lastName: string
      /**
       * @description Status of staff account
       * @example ACTIVE
       */
      status: string
      /**
       * @description Email addresses of staff
       * @example test@test.com
       */
      primaryEmail?: string
      generalAccount?: components['schemas']['UserCaseloadDto']
      adminAccount?: components['schemas']['UserCaseloadDto']
    }
    /** @description User & Caseload Information */
    UserCaseloadDto: {
      /**
       * @description User name
       * @example John1
       */
      username: string
      /**
       * @description Indicates that the user is active or not
       * @example true
       */
      active: boolean
      /**
       * @description Type of user account
       * @example GENERAL
       * @enum {string}
       */
      accountType: 'GENERAL' | 'ADMIN'
      activeCaseload?: components['schemas']['PrisonCaseloadDto']
      /** @description Caseloads available for this user */
      caseloads?: components['schemas']['PrisonCaseloadDto'][]
    }
    /** @description Linking a new General account to an existing admin user account */
    CreateLinkedGeneralUserRequest: {
      /**
       * @description existing admin username
       * @example TESTUSER1_ADM
       */
      existingAdminUsername: string
      /**
       * @description new general username
       * @example TESTUSER1_GEN
       */
      generalUsername: string
      /**
       * @description Default caseload (a.k.a Prison ID), not required for admin accounts
       * @example BXI
       */
      defaultCaseloadId: string
    }
    /** @description Linking a new Central admin account to an existing general user */
    CreateLinkedCentralAdminUserRequest: {
      /**
       * @description existingUsername
       * @example TESTUSER1
       */
      existingUsername: string
      /**
       * @description adminUsername
       * @example TESTUSER1_ADM
       */
      adminUsername: string
    }
    CreateGroupDto: {
      /**
       * @description Group Code
       * @example HDC_NPS_NE
       */
      groupCode: string
      /**
       * @description groupName
       * @example HDC NPS North East
       */
      groupName: string
    }
    CreateChildGroupDto: {
      /**
       * @description Parent Group Code
       * @example HNC_NPS
       */
      parentGroupCode: string
      /**
       * @description Group Code
       * @example HDC_NPS_NE
       */
      groupCode: string
      /**
       * @description groupName
       * @example HDC NPS North East
       */
      groupName: string
    }
    AmendUser: {
      /**
       * @description Email address
       * @example nomis.user@someagency.justice.gov.uk
       */
      email: string
    }
    /** @description Details of the user to be created. */
    NewUser: {
      /**
       * @description Email address
       * @example nomis.user@someagency.justice.gov.uk
       */
      email: string
      /**
       * @description First name
       * @example Nomis
       */
      firstName: string
      /**
       * @description Last name
       * @example User
       */
      lastName: string
      /**
       * @description Initial groups, can be used for one or more initial groups
       * @example [
       *   "SITE_1_GROUP_1",
       *   "SITE_1_GROUP_2"
       * ]
       */
      groupCodes?: string[]
    }
    CreateEmailDomainDto: {
      /**
       * @description Email domain
       * @example careuk.com
       */
      name: string
      /**
       * @description Email domain description
       * @example CAREUK
       */
      description?: string
    }
    EmailDomainDto: {
      /** @description Email domain id */
      id: string
      /**
       * @description Email domain
       * @example careuk.com
       */
      domain: string
      /**
       * @description Email domain description
       * @example CAREUK
       */
      description: string
    }
    /** @description User Details */
    UserDetailsDto: {
      /**
       * @description Username
       * @example DEMO_USER1
       */
      username: string
      /**
       * @description Active
       * @example false
       */
      active: boolean
      /**
       * @description Name
       * @example John Smith
       */
      name: string
      /**
       * Authentication Source
       * @description auth for external users, nomis for nomis authenticated users
       * @example nomis
       * @enum {string}
       */
      authSource: 'auth' | 'azuread' | 'delius' | 'nomis' | 'none'
      /**
       * Staff Id
       * Format: int64
       * @description Deprecated, use userId instead
       * @example 231232
       */
      staffId?: number
      /**
       * Current Active Caseload
       * @description Deprecated, retrieve from prison API rather than manage users
       * @example MDI
       */
      activeCaseLoadId?: string
      /**
       * User Id
       * @description Unique identifier for user, will be UUID for external users or staff ID for nomis users
       * @example 231232
       */
      userId: string
      /**
       * Unique Id
       * Format: uuid
       * @description Universally unique identifier for user, generated and stored in auth database for all users
       * @example 5105a589-75b3-4ca0-9433-b96228c1c8f3
       */
      uuid?: string
    }
    /** @description User Role */
    UserRole: {
      /**
       * @description Role Code
       * @example GLOBAL_SEARCH
       */
      roleCode: string
    }
    ErrorDetail: {
      /**
       * @description Error
       * @example Not Found
       */
      error: string
      /**
       * @description Error description
       * @example User not found.
       */
      error_description: string
      /**
       * @description Field in error
       * @example username
       */
      field?: string
    }
    AuthUserDto: {
      /**
       * @description User ID
       * @example 91229A16-B5F4-4784-942E-A484A97AC865
       */
      userId?: string
      /**
       * @description Username
       * @example externaluser
       */
      username?: string
      /**
       * @description Email address
       * @example external.user@someagency.justice.gov.uk
       */
      email?: string
      /**
       * @description First name
       * @example External
       */
      firstName?: string
      /**
       * @description Last name
       * @example User
       */
      lastName?: string
      /**
       * @description Account is locked due to incorrect password attempts
       * @example true
       */
      locked: boolean
      /**
       * @description Account is enabled
       * @example false
       */
      enabled: boolean
      /**
       * @description Email address has been verified
       * @example false
       */
      verified: boolean
      /**
       * Format: date-time
       * @description Last time user logged in
       */
      lastLoggedIn: string
      /**
       * @description Authentication source
       * @example delius
       */
      source: string
    }
    PageDetails: {
      sort: components['schemas']['PageSort']
      /** Format: int32 */
      offset: number
      /** Format: int32 */
      pageNumber: number
      /** Format: int32 */
      pageSize: number
      paged: boolean
      unpaged: boolean
    }
    PageSort: {
      sorted: boolean
      unsorted: boolean
      empty: boolean
    }
    PagedResponseAuthUserDto: {
      content: components['schemas']['AuthUserDto'][]
      pageable: components['schemas']['PageDetails']
      last: boolean
      /** Format: int32 */
      totalPages: number
      /** Format: int64 */
      totalElements: number
      /** Format: int32 */
      size: number
      /** Format: int32 */
      number: number
      sort: components['schemas']['PageSort']
      /** Format: int32 */
      numberOfElements: number
      first: boolean
      empty: boolean
    }
    User: {
      username: string
    }
    /** @description User Role */
    ExternalUserRole: {
      /**
       * @description Role Code
       * @example GLOBAL_SEARCH
       */
      roleCode: string
    }
    /** @description User Group */
    UserGroupDto: {
      /**
       * @description Group Code
       * @example HDC_NPS_NE
       */
      groupCode: string
      /**
       * @description Group Name
       * @example HDC NPS North East
       */
      groupName: string
    }
    /** @description Administration Type */
    AdminTypeReturn: {
      adminTypeCode: string
      adminTypeName: string
    }
    /** @description Role Details */
    RoleDto: {
      /**
       * @description Role Code
       * @example AUTH_GROUP_MANAGER
       */
      roleCode: string
      /**
       * @description Role Name
       * @example Auth Group Manager
       */
      roleName: string
      /**
       * @description Role Description
       * @example Allow Group Manager to administer the account within their groups
       */
      roleDescription: string
      /** @description Administration Type */
      adminType: components['schemas']['AdminTypeReturn'][]
    }
    PagedResponseRoleDto: {
      content: components['schemas']['RoleDto'][]
      pageable: components['schemas']['PageDetails']
      last: boolean
      /** Format: int32 */
      totalPages: number
      /** Format: int64 */
      totalElements: number
      /** Format: int32 */
      size: number
      /** Format: int32 */
      number: number
      sort: components['schemas']['PageSort']
      /** Format: int32 */
      numberOfElements: number
      first: boolean
      empty: boolean
    }
    PrisonUserDto: {
      /** @example RO_USER_TEST */
      username: string
      /**
       * Format: int64
       * @example 1234564789
       */
      staffId: number
      /** @example ryanorton@justice.gov.uk */
      email?: string
      /** @example true */
      verified: boolean
      /** @example Ryan */
      firstName: string
      /** @example Orton */
      lastName: string
      /** @example Ryan Orton */
      name: string
      /** @example MDI */
      activeCaseLoadId?: string
    }
    /** @description Prison User Information */
    PrisonUserDetails: {
      /**
       * @description Username
       * @example testuser1
       */
      username: string
      /**
       * Format: int64
       * @description Staff ID
       * @example 324323
       */
      staffId: number
      /**
       * @description First name of the user
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user
       * @example Smith
       */
      lastName: string
      /**
       * @description Active Caseload of the user
       * @example BXI
       */
      activeCaseloadId?: string
      /**
       * @description Status of the user
       * @example OPEN
       * @enum {string}
       */
      accountStatus?:
        | 'OPEN'
        | 'EXPIRED'
        | 'EXPIRED_GRACE'
        | 'LOCKED_TIMED'
        | 'LOCKED'
        | 'EXPIRED_LOCKED_TIMED'
        | 'EXPIRED_GRACE_LOCKED_TIMED'
        | 'EXPIRED_LOCKED'
        | 'EXPIRED_GRACE_LOCKED'
      /**
       * @description Type of user account
       * @example GENERAL
       * @enum {string}
       */
      accountType: 'GENERAL' | 'ADMIN'
      /**
       * @description Email addresses of user
       * @example test@test.com
       */
      primaryEmail?: string
      /** @description List of associated DPS Role Codes */
      dpsRoleCodes?: string[]
      /** @description List of user groups administered */
      administratorOfUserGroups?: components['schemas']['PrisonUserGroupDetail'][]
      /** @description Account is not locked */
      accountNonLocked?: boolean
      /** @description Credentials are not expired flag */
      credentialsNonExpired?: boolean
      /** @description User is enabled flag */
      enabled: boolean
      /** @description User is admin flag */
      admin?: boolean
      /** @description User is active flag */
      active: boolean
      /**
       * @description Staff Status
       * @example ACTIVE
       */
      staffStatus?: string
      /**
       * Format: date-time
       * @description Last logon date
       */
      lastLogonDate?: string
      /** Format: int64 */
      userId: number
      name: string
      /** @enum {string} */
      authSource: 'auth' | 'azuread' | 'delius' | 'nomis' | 'none'
    }
    /** @description User Group Information */
    PrisonUserGroupDetail: {
      id: string
      name: string
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    PagedResponsePrisonUserSearchSummary: {
      content: components['schemas']['PrisonUserSearchSummary'][]
      pageable: components['schemas']['PageDetails']
      last: boolean
      /** Format: int32 */
      totalPages: number
      /** Format: int64 */
      totalElements: number
      /** Format: int32 */
      size: number
      /** Format: int32 */
      number: number
      sort: components['schemas']['PageSort']
      /** Format: int32 */
      numberOfElements: number
      first: boolean
      empty: boolean
    }
    PrisonUserSearchSummary: {
      username: string
      /** Format: int32 */
      staffId: number
      firstName: string
      lastName: string
      active: boolean
      status: string
      locked: boolean
      expired: boolean
      activeCaseload?: components['schemas']['PrisonCaseload']
      /** Format: int32 */
      dpsRoleCount: number
      email?: string
      staffStatus: string
    }
    PrisonUserSummary: {
      username: string
      staffId: string
      firstName: string
      lastName: string
      active: boolean
      activeCaseload?: components['schemas']['PrisonCaseload']
      email?: string
    }
    /** @description Summary User Information with Email Address */
    PrisonAdminUserSummary: {
      username: string
      /** Format: int64 */
      staffId: number
      firstName: string
      lastName: string
      active: boolean
      /** @enum {string} */
      status?:
        | 'OPEN'
        | 'EXPIRED'
        | 'EXPIRED_GRACE'
        | 'LOCKED_TIMED'
        | 'LOCKED'
        | 'EXPIRED_LOCKED_TIMED'
        | 'EXPIRED_GRACE_LOCKED_TIMED'
        | 'EXPIRED_LOCKED'
        | 'EXPIRED_GRACE_LOCKED'
      locked: boolean
      expired: boolean
      activeCaseload?: components['schemas']['PrisonCaseload']
      /** Format: int32 */
      dpsRoleCount: number
      email?: string
      groups: components['schemas']['PrisonUserGroupDetail'][]
      staffStatus?: string
    }
    /** @description Notification message */
    NotificationMessage: {
      /**
       * @description Message
       * @example Message string to be displayed in the notification banner
       */
      message: string
    }
    /** @description Group Details */
    GroupDetailsDto: {
      /**
       * @description Group Code
       * @example HDC_NPS_NE
       */
      groupCode: string
      /**
       * @description Group Name
       * @example HDC NPS North East
       */
      groupName: string
      /** @description Assignable Roles */
      assignableRoles: components['schemas']['UserAssignableRoleDto'][]
      /** @description Child Groups */
      children: components['schemas']['UserGroupDto'][]
    }
    /** @description User Role */
    UserAssignableRoleDto: {
      /**
       * @description Role Code
       * @example LICENCE_RO
       */
      roleCode: string
      /**
       * @description Role Name
       * @example Licence Responsible Officer
       */
      roleName: string
      /**
       * @description automatic
       * @example true
       */
      automatic: boolean
    }
    /** @description Group Details */
    ChildGroupDetailsDto: {
      /**
       * @description Group Code
       * @example HDC_NPS_NE
       */
      groupCode: string
      /**
       * @description Group Name
       * @example HDC NPS North East
       */
      groupName: string
    }
    ExternalUser: {
      /** Format: uuid */
      userId: string
      username: string
      email: string
      firstName: string
      lastName: string
      locked: boolean
      enabled: boolean
      verified: boolean
      /** Format: date-time */
      lastLoggedIn?: string
      inactiveReason?: string
      /** @enum {string} */
      authSource: 'auth' | 'azuread' | 'delius' | 'nomis' | 'none'
    }
    UserRoleList: components['schemas']['UserRole'][]
    ExternalUserDetailsDto: {
      /**
       * Format: uuid
       * @description User ID
       * @example 91229a16-b5f4-4784-942e-a484a97ac865
       */
      userId: string
      /**
       * @description Username
       * @example externaluser
       */
      username: string
      /**
       * @description Email address
       * @example external.user@someagency.justice.gov.uk
       */
      email?: string
      /**
       * @description First name
       * @example External
       */
      firstName: string
      /**
       * @description Last name
       * @example User
       */
      lastName: string
      /**
       * @description Account is locked due to incorrect password attempts
       * @example true
       */
      locked: boolean
      /**
       * @description Account is enabled
       * @example false
       */
      enabled: boolean
      /**
       * @description Email address has been verified
       * @example false
       */
      verified: boolean
      /**
       * Format: date-time
       * @description Last time user logged in
       */
      lastLoggedIn: string
      /**
       * @description Inactive reason
       * @example Left department
       */
      inactiveReason: string
    }
    PagedResponseExternalUserDetailsDto: {
      content: components['schemas']['ExternalUserDetailsDto'][]
      pageable: components['schemas']['PageDetails']
      last: boolean
      /** Format: int32 */
      totalPages: number
      /** Format: int64 */
      totalElements: number
      /** Format: int32 */
      size: number
      /** Format: int32 */
      number: number
      sort: components['schemas']['PageSort']
      /** Format: int32 */
      numberOfElements: number
      first: boolean
      empty: boolean
    }
    UserGroup: {
      groupCode: string
      groupName: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Amend role name
   * @description Amend the role name, role required is ROLE_ROLES_ADMIN
   */
  amendRoleName: {
    parameters: {
      path: {
        /**
         * @description The Role code of the role.
         * @example AUTH_GROUP_MANAGER
         */
        roleCode: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoleNameAmendmentDto']
      }
    }
    responses: {
      /** @description Role name updated */
      200: {
        content: never
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The role trying to update does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Amend role description
   * @description Amend the role description, role required is ROLE_ROLES_ADMIN
   */
  amendRoleDescription: {
    parameters: {
      path: {
        /**
         * @description The Role code of the role.
         * @example AUTH_GROUP_MANAGER
         */
        roleCode: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoleDescriptionAmendmentDto']
      }
    }
    responses: {
      /** @description Role description updated */
      200: {
        content: never
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The role trying to update does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Amend role admin type
   * @description Amend the role admin type, role required is ROLE_ROLES_ADMIN
   */
  amendRoleAdminType: {
    parameters: {
      path: {
        /**
         * @description The Role code of the role.
         * @example AUTH_GROUP_MANAGER
         */
        roleCode: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoleAdminTypeAmendmentDto']
      }
    }
    responses: {
      /** @description Role admin type updated */
      200: {
        content: never
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The role trying to update does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Unlock user account
   * @description Unlocks the user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
   */
  enableUser: {
    parameters: {
      path: {
        /**
         * @description Username
         * @example testuser1
         */
        username: string
      }
    }
    responses: {
      /** @description User account unlocked */
      200: {
        content: never
      }
      /** @description Incorrect request to unlock user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to unlock a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Lock user account
   * @description Locks the user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
   */
  disableUser: {
    parameters: {
      path: {
        /**
         * @description Username
         * @example testuser1
         */
        username: string
      }
    }
    responses: {
      /** @description User account locked */
      200: {
        content: never
      }
      /** @description Incorrect request to lock user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to lock a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Group detail.
   * @description return Group Details
   */
  getGroupDetail: {
    parameters: {
      path: {
        /** @description The group code of the group. */
        group: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['GroupDetailsDto']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Group not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Amend group name.
   * @description Amend group name.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
   */
  amendGroupName: {
    parameters: {
      path: {
        /** @description The group code of the group. */
        group: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GroupAmendmentDto']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Group not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Delete group.
   * @description Delete a Group.<br.>Requires role ROLE_MAINTAIN_OAUTH_USERS
   */
  deleteGroup: {
    parameters: {
      path: {
        /** @description The group code of the group. */
        group: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Group not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Child Group detail.
   * @description Fetches child group details.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
   */
  getChildGroupDetail: {
    parameters: {
      path: {
        /** @description The group code of the child group. */
        group: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ChildGroupDetailsDto']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Child Group not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Amend child group name.
   * @description Amend a Child Group Name.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
   */
  amendChildGroupName: {
    parameters: {
      path: {
        /** @description The group code of the child group. */
        group: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GroupAmendmentDto']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Child Group not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Delete child group.
   * @description Delete a child group.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
   */
  deleteChildGroup: {
    parameters: {
      path: {
        /** @description The group code of the child group. */
        group: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Child Group not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add role to user.
   * @description Add role to user. Requires role ROLE_MAINTAIN_OAUTH_USERS, ROLE_AUTH_GROUP_MANAGER or ROLE_MAINTAIN_IMS_USERS
   */
  addRoleByUserId: {
    parameters: {
      path: {
        /** @description The userId of the user. */
        userId: string
        /** @description The role to be added to the user. */
        role: string
      }
    }
    responses: {
      /** @description Added. */
      204: {
        content: never
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unable to maintain user, the user is not within one of your groups. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Role for user already exists. */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Remove role from user.
   * @description Remove role from user.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS , ROLE_AUTH_GROUP_MANAGER or ROLE_MAINTAIN_IMS_USERS
   */
  removeRoleByUserId: {
    parameters: {
      path: {
        /** @description The userId of the user. */
        userId: string
        /** @description The role code of the role to be deleted from the user. */
        role: string
      }
    }
    responses: {
      /** @description Deleted */
      204: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add group to user.
   * @description Add group to user. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
   */
  addGroupByUserId: {
    parameters: {
      path: {
        /** @description The userId of the user. */
        userId: string
        /** @description The group code of the group to be added to the user. */
        group: string
      }
    }
    responses: {
      /** @description Added */
      204: {
        content: never
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Group for user already exists. */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Remove group from user.
   * @description Remove group from user. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
   */
  removeGroupByUserId: {
    parameters: {
      path: {
        /** @description The userId of the user. */
        userId: string
        /** @description The group code of the group to be deleted from the user. */
        group: string
      }
    }
    responses: {
      /** @description Deleted */
      204: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Enable a user.
   * @description Enable a user. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
   */
  enableUserByUserId: {
    parameters: {
      path: {
        /** @description The userId of the user. */
        userId: string
      }
    }
    responses: {
      /** @description OK. */
      204: {
        content: never
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Disable a user.
   * @description Disable a user. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
   */
  disableUserByUserId: {
    parameters: {
      path: {
        /** @description The userId of the user. */
        userId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeactivateReason']
      }
    }
    responses: {
      /** @description OK. */
      204: {
        content: never
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unable to enable user, the user is not within one of your groups. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get all roles
   * @description Get all roles, role required is ROLE_ROLES_ADMIN (to find external roles), ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
   */
  getRoles: {
    parameters: {
      query?: {
        adminTypes?: ('DPS_LSA' | 'DPS_ADM' | 'EXT_ADM')[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RoleDto'][]
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create role
   * @description Create a new role, role required is ROLE_ROLES_ADMIN
   */
  createRole: {
    requestBody: {
      content: {
        'application/json': string
      }
    }
    responses: {
      /** @description Role Created */
      201: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Find prison users by first and last name.
   * @description Find prison users by first and last name. Requires role ROLE_USE_OF_FORCE or ROLE_STAFF_SEARCH
   */
  findUsersByFirstAndLastName: {
    parameters: {
      query: {
        /** @description The first name to match. Case insensitive. */
        firstName: string
        /** @description The last name to match. Case insensitive */
        lastName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonUserDto'][]
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create a DPS user
   * @description Creates a specific DPS user. Requires role ROLE_CREATE_USER
   */
  createUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserRequest']
      }
    }
    responses: {
      /** @description Create a DPS user */
      200: {
        content: {
          'application/json': components['schemas']['NewPrisonUserDto']
        }
      }
      /** @description Created */
      201: {
        content: {
          'application/json': components['schemas']['NewPrisonUserDto']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get list of roles associated with the users account
   * @description Roles for a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
   */
  getUserRoles: {
    parameters: {
      path: {
        /**
         * @description Username
         * @example TEST_USER1
         */
        username: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['UserRoleDetail']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add a role to the specified user account, all roles will be added to DPS caseload unless specified
   * @description Adds a role to a user, user must have caseload (if specified). Default caseload is DPS caseload (NWEB).  Cannot add an existing role to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
   */
  addRoles: {
    parameters: {
      query?: {
        /**
         * @description Caseload Id
         * @example NWEB
         */
        caseloadId?: string
      }
      path: {
        /**
         * @description Username of the account to add roles
         * @example TEST_USER2
         */
        username: string
      }
    }
    requestBody: {
      content: {
        'application/json': string
      }
    }
    responses: {
      /** @description User information with role details */
      201: {
        content: {
          'application/json': components['schemas']['UserRoleDetail']
        }
      }
      /** @description Incorrect request to add a role to a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to add a role to this account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Amend a prison user email address.
   * @description Amend a prison user email address. Requires role MAINTAIN_ACCESS_ROLES_ADMIN
   */
  amendUserEmail: {
    parameters: {
      path: {
        /** @description The username of the user. */
        username: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AmendEmail']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': string
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Sync Nomis user email back into Auth
   * @description Run process to check for differences in email address between Auth and NOMIS and updates Auth if required.<br/> Requires role ROLE_MAINTAIN_ACCESS_ROLES or ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
   */
  syncUserEmail: {
    parameters: {
      path: {
        /** @description The username of the user. */
        username: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get list of caseloads associated with the users account
   * @description Caseloads for a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES"
   */
  getUserCaseloads: {
    parameters: {
      path: {
        /**
         * @description Username
         * @example TEST_USER1
         */
        username: string
      }
    }
    responses: {
      /** @description User caseload list */
      200: {
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** @description Incorrect request to get caseloads for a user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get a caseload for a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add multiple caseloads to the specified user account
   * @description Adds caseloads to a user, caseloads must exist. Cannot add an existing caseload to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
   */
  addCaseloads: {
    parameters: {
      path: {
        /**
         * @description Username of the account to add caseloads
         * @example TEST_USER2
         */
        username: string
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description User information with caseload details */
      201: {
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** @description Incorrect request to add caseloads to a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to add caseloads to account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Link a Local Admin User to an existing General Account
   * @description Link a Local Admin User to an existing General Account. Requires role ROLE_CREATE_USER
   */
  createLinkedLocalAdminUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLinkedLocalAdminUserRequest']
      }
    }
    responses: {
      /** @description Local Admin User linked to an existing General Account */
      201: {
        content: {
          'application/json': components['schemas']['PrisonStaffUserDto']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Link a New General User to an existing Admin Account
   * @description Link a New General User to an existing Admin Account. Requires role ROLE_CREATE_USER
   */
  createLinkedGeneralUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLinkedGeneralUserRequest']
      }
    }
    responses: {
      /** @description General User linked to an existing Admin Account */
      201: {
        content: {
          'application/json': components['schemas']['PrisonStaffUserDto']
        }
      }
      /** @description Incorrect request to link a general user to an admin user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint, requires a valid OAuth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to link a general user to an existing admin user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Link an Admin User to an existing General Account
   * @description Link an Admin User to an existing General Account. Requires role ROLE_CREATE_USER
   */
  createLinkedCentralAdminUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLinkedCentralAdminUserRequest']
      }
    }
    responses: {
      /** @description Admin User linked to an existing General Account */
      201: {
        content: {
          'application/json': components['schemas']['PrisonStaffUserDto']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get all groups
   * @description Get all groups, role required is ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
   */
  getGroups: {
    responses: {
      /** @description All Groups Returned */
      200: {
        content: {
          'application/json': components['schemas']['UserGroupDto'][]
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create group.
   * @description Create a group.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
   */
  createGroup: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGroupDto']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Group already exists. */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create child group.
   * @description Create a Child Group.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS
   */
  createChildGroup: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateChildGroupDto']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Child Group already exists. */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get list of roles associated with the users account
   * @description Roles for a specific user.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS, ROLE_AUTH_GROUP_MANAGER or ROLE_MAINTAIN_IMS_USERS
   */
  getUserRoles_1: {
    parameters: {
      path: {
        /** @description The userId of the user. */
        userId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['UserRole'][]
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add roles to user.
   * @description Add role to user, post version taking multiple roles<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS, ROLE_AUTH_GROUP_MANAGER or ROLE_MAINTAIN_IMS_USERS
   */
  addRolesByUserId: {
    parameters: {
      path: {
        /** @description The user Id of the user. */
        userId: string
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: never
      }
      /** @description No Content */
      204: {
        content: never
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Role(s) for user already exists.. */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Amend a user email address.
   * @description Amend a user email address. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
   */
  alterUserEmail: {
    parameters: {
      path: {
        /** @description The ID of the user. */
        userId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AmendUser']
      }
    }
    responses: {
      /** @description OK. */
      204: {
        content: {
          '*/*': string
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create user
   * @description Create user. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
   */
  createUserByEmail: {
    requestBody: {
      content: {
        'application/json': components['schemas']['NewUser']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': Record<string, never>
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User or email already exists. */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get all email domains
   * @description Get all email domains, role required is ROLE_MAINTAIN_EMAIL_DOMAINS
   */
  domainList: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['EmailDomainDto'][]
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create email domain
   * @description Create a new email domain, role required is ROLE_MAINTAIN_EMAIL_DOMAINS
   */
  addEmailDomain: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateEmailDomainDto']
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          '*/*': components['schemas']['EmailDomainDto']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Email domain already exists */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * User detail.
   * @description Find user detail by username.
   */
  findUser: {
    parameters: {
      path: {
        /** @description The username of the user. */
        username: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['UserDetailsDto']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * List of roles for user
   * @description List of roles for user. Currently restricted to service specific roles: ROLE_INTEL_ADMIN or ROLE_PF_USER_ADMIN or ROLE_PCMS_USER_ADMIN.<br/><br/>**Change to old endpoint in Auth** <br/> 1)  Nomis / Prison user doesn't return additional role in the list:  PRISON <br/>                                         2)  Delius user doesn't return additional role in the list:  PROBATION
   */
  userRoles: {
    parameters: {
      path: {
        /** @description The username of the user. */
        username: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['UserRole'][]
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Email address for user
   * @description Verified email address for user
   */
  getUserEmail: {
    parameters: {
      query?: {
        /** @description Return unverified email addresses. */
        unverified?: boolean
      }
      path: {
        /** @description The username of the user. */
        username: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': Record<string, never>
        }
      }
      /** @description No content.  No verified email address found for user */
      204: {
        content: {
          '*/*': Record<string, never>
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. The user doesn't exist so could have never logged in */
      404: {
        content: {
          'application/json': components['schemas']['ErrorDetail']
        }
      }
    }
  }
  /**
   * Search for users
   * @description
   *       Search for users in the Auth DB only who match on partial first name, surname, username or email and return a pageable result set.
   *       Optionally choose the authentication sources from any combination of auth, delius, nomis and azuread sources.
   *       Provide the authSources as a list of values with the same name. e.g. ?authSources=nomis&authSources=delius&authSources=auth
   *       It will return users with the requested auth sources where they have authenticated against the auth service at least once.
   *       Note: User information held in the auth service may be out of date with the user information held in the source systems as
   *       their details will be as they were the last time that they authenticated.<br/><br/>
   *
   *        Requires role ROLE_INTEL_ADMIN or ROLE_PCMS_USER_ADMIN or ROLE_PF_USER_ADMIN
   */
  searchForUsersInMultipleSourceSystems: {
    parameters: {
      query?: {
        /**
         * @description The username, email or name of the user.
         * @example j smith
         */
        name?: string
        /** @description User status to find ACTIVE, INACTIVE or ALL. Defaults to ALL if omitted. */
        status?: 'ACTIVE' | 'INACTIVE' | 'ALL'
        /** @description List of auth sources to search [nomis|delius|auth|azuread]. Defaults to auth if omitted. */
        authSources?: ('auth' | 'azuread' | 'delius' | 'nomis' | 'none')[]
        page?: number
        size?: number
        sort?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedResponseAuthUserDto']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * My User details.
   * @description Find my user details.
   */
  myDetails: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['User']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * List of roles for current user.
   * @description List of roles for current user.
   */
  myRoles: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ExternalUserRole'][]
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * My Group details.
   * @description Find my location/group details. This should be accessed with user token.
   */
  myGroupDetails: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['UserGroupDto'][]
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Email address for current user
   * @description Verified email address for current user
   */
  myEmail: {
    parameters: {
      query?: {
        /** @description Return unverified email addresses. */
        unverified?: boolean
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': Record<string, never>
        }
      }
      /** @description No content.  No verified email address found for user */
      204: {
        content: {
          '*/*': Record<string, never>
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get list of caseloads associated with the current user
   * @description Caseloads for the current user
   */
  getMyCaseloads: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['UserCaseloadDetail']
        }
      }
    }
  }
  /**
   * Get role details
   * @description Get role details, role required is ROLE_ROLES_ADMIN
   */
  getRoleDetail: {
    parameters: {
      path: {
        /**
         * @description The Role code of the role.
         * @example AUTH_GROUP_MANAGER
         */
        role: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RoleDto']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get all paged roles
   * @description Get all paged roles, role required is ROLE_ROLES_ADMIN
   */
  getPagedRoles: {
    parameters: {
      query?: {
        page?: number
        size?: number
        sort?: string
        roleName?: string
        roleCode?: string
        adminTypes?: ('DPS_LSA' | 'DPS_ADM' | 'EXT_ADM')[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedResponseRoleDto']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * List of mapped delius roles
   * @description List of mapped  delius roles. Requires role ROLE_INTEL_ADMIN or ROLE_PCMS_USER_ADMIN or ROLE_PF_USER_ADMIN
   */
  findMappedDeliusRoles: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': {
            [key: string]: string[]
          }
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get specified user details
   * @description Information on a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES or ROLE_MANAGE_NOMIS_USER_ACCOUNT
   */
  findUserByUsername: {
    parameters: {
      path: {
        /** @description The username of the user. */
        username: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['NewPrisonUserDto']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get specified user details
   * @description Information on a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES or ROLE_MANAGE_NOMIS_USER_ACCOUNT
   */
  getUserDetails: {
    parameters: {
      path: {
        /**
         * @description Username
         * @example testuser1
         */
        username: string
      }
    }
    responses: {
      /** @description User Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['PrisonUserDetails']
        }
      }
      /** @description Incorrect request to get user information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get all users filtered as specified
   * @description Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES. <br/>Get all users with filter.<br/> For local administrators this will implicitly filter users in the prisons they administer, therefore username is expected in the authorisation token. <br/>For users with role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN this allows access to all staff.
   */
  getUsers: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by name (first name and/or last name in any order), username or email address.
         * @example Raj
         */
        nameFilter?: string
        /**
         * @description Filter will match users that have all DPS role specified
         * @example ADD_SENSITIVE_CASE_NOTES
         */
        accessRoles?: string[]
        /**
         * @description Filter will match users that have the NOMIS role specified, should be used with a caseloadId or will get duplicates
         * @example 201
         */
        nomisRole?: string
        /**
         * @description Limit to active / inactive / show all users
         * @example INACTIVE
         */
        status?: 'ALL' | 'ACTIVE' | 'INACTIVE'
        /**
         * @description Filter results by user's currently active caseload i.e. the one they have currently selected
         * @example MDI
         */
        activeCaseload?: string
        /**
         * @description Filter results to include only those users that have access to the specified caseload (irrespective of whether it is currently active or not
         * @example MDI
         */
        caseload?: string
        /**
         * @description Returns result inclusive of selected roles
         * @example true
         */
        inclusiveRoles?: boolean
        /**
         * @description Returns all active LSAs
         * @example true
         */
        showOnlyLSAs?: boolean
      }
    }
    responses: {
      /** @description Pageable list of user summaries */
      200: {
        content: {
          '*/*': components['schemas']['PagedResponsePrisonUserSearchSummary']
        }
      }
      /** @description Incorrect filter supplied */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieves all caseloads
   * @description Retrieves all the current active general caseloads, these are effectively prisons that staff can be associated with.
   */
  getCaseload: {
    responses: {
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  downloadUsersByFilters: {
    parameters: {
      query?: {
        /**
         * @description Filter results by name (first name and/or last name in any order), username or email address.
         * @example Raj
         */
        nameFilter?: string
        /**
         * @description Filter will match users that have all DPS role specified
         * @example ADD_SENSITIVE_CASE_NOTES
         */
        accessRoles?: string[]
        /**
         * @description Filter will match users that have the NOMIS role specified, should be used with a caseloadId or will get duplicates
         * @example 201
         */
        nomisRole?: string
        /**
         * @description Limit to active / inactive / show all users
         * @example INACTIVE
         */
        status?: 'ALL' | 'ACTIVE' | 'INACTIVE'
        /**
         * @description Filter results by user's currently active caseload i.e. the one they have currently selected
         * @example MDI
         */
        activeCaseload?: string
        /**
         * @description Filter results to include only those users that have access to the specified caseload (irrespective of whether it is currently active or not
         * @example MDI
         */
        caseload?: string
        /**
         * @description Returns result inclusive of selected roles
         * @example true
         */
        inclusiveRoles?: boolean
        /**
         * @description Returns all active LSAs
         * @example true
         */
        showOnlyLSAs?: boolean
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PrisonUserSummary'][]
        }
      }
    }
  }
  downloadPrisonAdminsByFilter: {
    parameters: {
      query?: {
        /**
         * @description Filter results by name (first name and/or last name in any order), username or email address.
         * @example Raj
         */
        nameFilter?: string
        /**
         * @description Filter will match users that have all DPS role specified
         * @example ADD_SENSITIVE_CASE_NOTES
         */
        accessRoles?: string[]
        /**
         * @description Filter will match users that have the NOMIS role specified, should be used with a caseloadId or will get duplicates
         * @example 201
         */
        nomisRole?: string
        /**
         * @description Limit to active / inactive / show all users
         * @example INACTIVE
         */
        status?: 'ALL' | 'ACTIVE' | 'INACTIVE'
        /**
         * @description Filter results by user's currently active caseload i.e. the one they have currently selected
         * @example MDI
         */
        activeCaseload?: string
        /**
         * @description Filter results to include only those users that have access to the specified caseload (irrespective of whether it is currently active or not
         * @example MDI
         */
        caseload?: string
        /**
         * @description Returns result inclusive of selected roles
         * @example true
         */
        inclusiveRoles?: boolean
        /**
         * @description Returns all active LSAs
         * @example true
         */
        showOnlyLSAs?: boolean
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PrisonAdminUserSummary'][]
        }
      }
    }
  }
  /**
   * Gets Notification message
   * @description Message string to be displayed in the notification banner.
   */
  getNotificationBannerMessage: {
    parameters: {
      path: {
        /**
         * @description The notification page
         * @example roles
         */
        page: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['NotificationMessage']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Search for a user.
   * @description Search for a user.
   */
  searchForUser: {
    parameters: {
      query: {
        /** @description The email address of the user. */
        email: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': Record<string, never>
        }
      }
      /** @description No users found. */
      204: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * User detail.
   * @description User detail.
   */
  user: {
    parameters: {
      path: {
        /** @description The username of the user. */
        username: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ExternalUser']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get groups for userId.
   * @description Get groups for userId. Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER or ROLE_VIEW_USER_GROUPS
   */
  getGroups_1: {
    parameters: {
      query?: {
        /** @description Whether groups are expanded into their children. */
        children?: boolean
      }
      path: {
        /** @description The userId of the user. */
        userId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['UserGroupDto'][]
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get list of roles associated with the users account
   * @description Roles for a specific user. Requires role ROLE_MAINTAIN_OAUTH_USERS, ROLE_AUTH_GROUP_MANAGER, ROLE_MAINTAIN_IMS_USERS
   */
  getAssignableRoles: {
    parameters: {
      path: {
        /** @description The userId of the user. */
        userId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['UserRoleList']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Search for an external user. */
  searchForUser_1: {
    parameters: {
      query?: {
        /**
         * @description The username, email or name of the user.
         * @example j smith
         */
        name?: string
        /** @description The role codes of the user. */
        roles?: string[]
        /** @description The group codes of the user. */
        groups?: string[]
        /** @description Limit to active / inactive / show all users. */
        status?: 'ACTIVE' | 'INACTIVE' | 'ALL'
        page?: number
        size?: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedResponseExternalUserDetailsDto']
        }
      }
      /** @description Unauthorized. */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get list of searchable roles.
   * @description Get list of roles that can be search for by the current user.
   */
  searchableRoles: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['UserRoleList']
        }
      }
      /** @description Unauthorized. */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get list of assignable groups.
   * @description Get list of groups that can be assigned by the current user.
   */
  assignableGroups: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['UserGroup'][]
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve user details by user id.
   * @description Retrieve detail by user id. Note that when accessing with Group Manager role the accessor must have a group in common with the user.<br/>Requires role ROLE_MAINTAIN_OAUTH_USERS or ROLE_AUTH_GROUP_MANAGER
   */
  userById: {
    parameters: {
      path: {
        /** @description The id of the user. */
        userId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ExternalUserDetailsDto']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unable to view user, either you do not have authority or the user is not within one of your groups. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get email domain details
   * @description Get email domain details, role required is ROLE_MAINTAIN_EMAIL_DOMAINS
   */
  domain: {
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['EmailDomainDto']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Email domain not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Delete email domain details
   * @description Delete email domain details, role required is ROLE_MAINTAIN_EMAIL_DOMAINS
   */
  deleteEmailDomain: {
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      /** @description Email domain details deleted */
      200: {
        content: never
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden. Requires authorisation with correct role. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Email domain not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Remove a role from a user
   * @description The user must already have the role to be removed. Default role caseload is a DPS role unless specified. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
   */
  removeRoleFromUser: {
    parameters: {
      query?: {
        /**
         * @description Caseload Id
         * @example NWEB
         */
        caseloadId?: string
      }
      path: {
        /**
         * @description Username of the account to remove role
         * @example TEST_USER2
         */
        username: string
        /**
         * @description Role Code
         * @example GLOBAL_SEARCH
         */
        roleCode: string
      }
    }
    responses: {
      /** @description User information with role details */
      200: {
        content: {
          'application/json': components['schemas']['UserRoleDetail']
        }
      }
      /** @description Incorrect request to remove a role from a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to remove a role this user account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Remove a caseload from a user
   * @description The user must already have the caseload to be removed. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
   */
  removeCaseload: {
    parameters: {
      path: {
        /**
         * @description Username to remove caseload from
         * @example TEST_USER2
         */
        username: string
        /**
         * @description Caseload ID to remove from this user
         * @example LEI
         */
        caseloadId: string
      }
    }
    responses: {
      /** @description User information with caseload details */
      200: {
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** @description Incorrect request to remove a caseload from a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to remove a caseload this user account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
