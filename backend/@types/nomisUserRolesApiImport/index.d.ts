/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/users/{username}/unlock-user': {
    /**
     * Unlock user account
     * @description Unlocks the user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    put: operations['unlockUser']
  }
  '/users/{username}/lock-user': {
    /**
     * Lock user account
     * @description Locks the user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    put: operations['lockUser']
  }
  '/users/{username}/default-caseload/{defaultCaseloadId}': {
    /**
     * Set the default caseload for this user
     * @description Sets the default caseload. Caseload must already be present. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    put: operations['setDefaultCaseload']
  }
  '/users/{username}/change-password': {
    /**
     * Change password of user account
     * @description Change password of user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    put: operations['changePassword']
  }
  '/users/{username}/change-name': {
    /**
     * Change staff name of user account
     * @description Change staff name of user account. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
     */
    put: operations['changeName']
  }
  '/users/{username}/change-email': {
    /**
     * Change email of user account
     * @description Change email of user account. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
     */
    put: operations['changeEmail']
  }
  '/roles/{code}': {
    /**
     * Get specified role details
     * @description Information on a specific role. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLES_ADMIN
     */
    get: operations['getRoleDetails']
    /**
     * Updates a role in NOMIS
     * @description Updates a role. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLES_ADMIN
     */
    put: operations['updateRole']
  }
  '/users/{username}/roles': {
    /**
     * Get list of roles associated with the users account
     * @description Roles for a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    get: operations['getUserRoles']
    /**
     * Add a role to the specified user account, all roles will be added to DPS caseload unless specified
     * @description Adds a role to a user, user must have caseload (if specified). Default caseload is DPS caseload (NWEB).  Cannot add an existing role to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    post: operations['addRoles']
  }
  '/users/{username}/roles/{roleCode}': {
    /**
     * Add a role to the specified user account, all roles will be added to DPS caseload unless specified
     * @description Adds a role to a user, user must have caseload (if specified). Default caseload is DPS caseload (NWEB).  Cannot add an existing role to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    post: operations['addRole']
    /**
     * Remove a role from a user
     * @description The user must already have the role to be removed. Default role caseload is a DPS role unless specified. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    delete: operations['removeRole']
  }
  '/users/{username}/record-sign-in': {
    /**
     * Record a user as having successfully signed in.
     * @description Record a user as having successfully signed in, with current date and time written to the LAST_LOGON_DATE. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    post: operations['recordSignIn']
  }
  '/users/{username}/caseloads': {
    /**
     * Get list of caseloads associated with the users account
     * @description Caseloads for a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    get: operations['getUserCaseloads']
    /**
     * Add multiple caseloads to the specified user account
     * @description Adds caseloads to a user, caseloads must exist. Cannot add an existing caseload to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
     */
    post: operations['addCaseloads']
  }
  '/users/{username}/caseloads/{caseloadId}': {
    /**
     * Add a caseload to the specified user account
     * @description Adds a caseload to a user, caseload must exist. Cannot add an existing caseload to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
     */
    post: operations['addCaseload']
    /**
     * Remove a caseload from a user
     * @description The user must already have the caseload to be removed. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
     */
    delete: operations['removeCaseload']
  }
  '/users/{username}/authenticate': {
    /** Authenticate a username and password against NOMIS database */
    post: operations['authenticate']
  }
  '/users/user': {
    /**
     * Find users by their email address
     * @description Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    get: operations['findUsersByEmailAddress']
    /**
     * Find users by their email address and / or list of usernames
     * @description Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    post: operations['findUsersByEmailAddressAndUsernames']
  }
  '/users/remove-roles/{roleCode}': {
    /**
     * Bulk removes a role from a group of users
     * @description If the user does not have the role already it is ignored. Any users not found will also be ignored but will not be returned in the response. Only DPS roles are removed on the DPS caseload (NWEB). Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    post: operations['bulkRemoveRoles']
  }
  '/users/reassign-roles': {
    /**
     * Reassign roles from a NOMIS role to a DPS role and removes the NOMIS role if no longer required
     * @description Requires role ROLE_MAINTAIN_ACCESS_ROLES
     */
    post: operations['reassignRoles']
  }
  '/users/local-admin-account': {
    /**
     * Create local admin user account
     * @description Creates local admin user account, oracle schema and staff user information. Requires role ROLE_CREATE_USER
     */
    post: operations['createLocalAdminUser']
  }
  '/users/link-local-admin-account/{linkedUsername}': {
    /**
     * Link a local admin user account to an existing general account.
     * @description Can only be linked to an general account. Can only be linked to an account that doesn't already have one admin account. Requires role ROLE_CREATE_USER
     */
    post: operations['linkLocalAdminAccount']
  }
  '/users/link-general-account/{linkedUsername}': {
    /**
     * Link a general user account to an existing admin account.
     * @description Can only be linked to an admin account. Can only be linked to an account that doesn't already have one general account. Requires role ROLE_CREATE_USER
     */
    post: operations['linkGeneralAccount']
  }
  '/users/link-admin-account/{linkedUsername}': {
    /**
     * Link an admin account to an existing general account.
     * @description Can only be linked to an general account. Can only be linked to an account that doesn't already have one Admin account. Requires role ROLE_CREATE_USER
     */
    post: operations['linkAdminAccount']
  }
  '/users/general-account': {
    /**
     * Create general user account
     * @description Creates general user account, oracle schema and staff user information. Requires role ROLE_CREATE_USER
     */
    post: operations['createGeneralUser']
  }
  '/users/admin-account': {
    /**
     * Create admin user account
     * @description Creates admin user account, oracle schema and staff user information. Requires role ROLE_CREATE_USER
     */
    post: operations['createAdminUser']
  }
  '/users/add-roles/{roleCode}': {
    /**
     * Bulk add a role to a group of users
     * @description If the user has this role already it is ignored. Any users not found will also be ignored but will not be returned in the response. Only DPS roles are added to the DPS caseload (NWEB). Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    post: operations['bulkAddRoles']
  }
  '/roles': {
    /**
     * Get all roles
     * @description Information on a list of roles. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN, ROLE_MAINTAIN_ACCESS_ROLES or ROLES_ADMIN
     */
    get: operations['getAllRoles']
    /**
     * Create a role in NOMIS
     * @description Creates a role. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLES_ADMIN
     */
    post: operations['createRole']
  }
  '/users': {
    /**
     * Get all users filtered as specified
     * @description Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES. <br/>Get all users with filter.<br/> For local administrators this will implicitly filter users in the prisons they administer, therefore username is expected in the authorisation token. <br/>For users with role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN this allows access to all staff.
     */
    get: operations['getUsers']
  }
  '/users/{username}': {
    /**
     * Get specified user details
     * @description Information on a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES or ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    get: operations['getUserDetails']
  }
  '/users/staff': {
    /**
     * Find users by first and last names
     * @description Requires role ROLE_USE_OF_FORCE or ROLE_STAFF_SEARCH
     */
    get: operations['findUsersByFirstAndLastNames']
  }
  '/users/staff/{staffId}': {
    /**
     * Get specified staff details
     * @description Will display general and admin user account if setup.  Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
     */
    get: operations['getUserDetailsByStaffId']
  }
  '/users/emails': {
    /**
     * Get all users
     * @description Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    get: operations['findUsersAndEmails']
  }
  '/users/download': {
    get: operations['downloadUsersByFilters']
  }
  '/users/basic/{username}': {
    /**
     * Get user basic details
     * @description Information on a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES or ROLE_MANAGE_NOMIS_USER_ACCOUNT
     */
    get: operations['getUserBasicDetailsInfo']
  }
  '/reference-data/caseloads': {
    /**
     * Retrieves all caseloads
     * @description Retrieves all the current active general caseloads, these are effectively prisons that staff can be associated with
     */
    get: operations['getCaseload']
  }
  '/me': {
    /**
     * Get user details in context
     * @description Information on a specific user.
     */
    get: operations['getMyUserDetails']
  }
  '/me/roles': {
    /**
     * Get list of roles associated with the users account
     * @description Roles for a specific user in context
     */
    get: operations['getMyRoles']
  }
  '/me/caseloads': {
    /**
     * Get list of caseloads associated with the current user
     * @description Caseloads for the current user
     */
    get: operations['getMyCaseloads']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
    }
    /** @description Caseloads available for this user */
    PrisonCaseload: {
      /**
       * @description identify for caseload
       * @example WWI
       */
      id: string
      /**
       * @description name of caseload, typically prison name
       * @example WANDSWORTH (HMP)
       */
      name: string
    }
    /** @description User & Caseload Information */
    UserCaseloadDetail: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description Indicates that the user is active
       * @example true
       */
      active: boolean
      /**
       * @description Type of user account
       * @example GENERAL
       * @enum {string}
       */
      accountType: 'GENERAL' | 'ADMIN'
      activeCaseload?: components['schemas']['PrisonCaseload']
      /** @description Caseloads available for this user */
      caseloads: components['schemas']['PrisonCaseload'][]
    }
    /** @description Staff Information */
    StaffDetail: {
      /**
       * Format: int64
       * @description Staff ID
       * @example 324323
       */
      staffId: number
      /**
       * @description First name of the user
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user
       * @example Smith
       */
      lastName: string
      /**
       * @description Status of staff account
       * @example Smith
       */
      status: string
      /**
       * @description Email addresses of staff
       * @example test@test.com
       */
      primaryEmail?: string
      generalAccount?: components['schemas']['UserCaseloadDetail']
      adminAccount?: components['schemas']['UserCaseloadDetail']
    }
    /** @description Role update */
    UpdateRoleRequest: {
      /**
       * @description Role Name
       * @example Global Search Role
       */
      name?: string
      /**
       * Format: int32
       * @description Display Sequence
       * @example 99
       */
      sequence?: number
      /**
       * @description Parent Role Code
       * @example LICENCE_ADMIN
       */
      parentRoleCode?: string
      /**
       * @description Role Type
       * @example APP
       * @enum {string}
       */
      type?: 'APP' | 'INST' | 'COMM'
      /**
       * @description adminRoleOnly
       * @example true
       */
      adminRoleOnly?: boolean
    }
    /** @description Role Information */
    RoleDetail: {
      /**
       * @description Role Code
       * @example GLOBAL_SEARCH
       */
      code: string
      /**
       * @description Role Name
       * @example Global Search Role
       */
      name: string
      /**
       * Format: int32
       * @description The listing order
       * @default 1
       * @example 1
       */
      sequence: number
      /**
       * @description Role Type
       * @default APP
       * @example APP
       * @enum {string}
       */
      type?: 'APP' | 'INST' | 'COMM'
      /**
       * @description If the role is for admin users only
       * @default false
       * @example true
       */
      adminRoleOnly: boolean
      parentRole?: components['schemas']['RoleDetail']
    }
    /** @description Roles in caseload information */
    CaseloadRoleDetail: {
      caseload: components['schemas']['PrisonCaseload']
      /** @description NOMIS Roles assigned to this user */
      roles: components['schemas']['RoleDetail'][]
    }
    /** @description User & Role Information */
    UserRoleDetail: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description Indicates that the user is active
       * @example true
       */
      active: boolean
      /**
       * @description Type of user account
       * @example GENERAL
       * @enum {string}
       */
      accountType: 'GENERAL' | 'ADMIN'
      activeCaseload?: components['schemas']['PrisonCaseload']
      /** @description DPS Roles assigned to this user */
      dpsRoles: components['schemas']['RoleDetail'][]
      /** @description NOMIS Roles assigned to this user per caseload */
      nomisRoles?: components['schemas']['CaseloadRoleDetail'][]
    }
    /** @description Authentication Details */
    Authentication: {
      /**
       * @description Password
       * @example password123456
       */
      password: string
    }
    /** @description User Information */
    UserDetail: {
      /**
       * @description Username
       * @example testuser1
       */
      username: string
      /**
       * Format: int64
       * @description Staff ID
       * @example 324323
       */
      staffId: number
      /**
       * @description First name of the user
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user
       * @example Smith
       */
      lastName: string
      /**
       * @description Active Caseload of the user
       * @example BXI
       */
      activeCaseloadId?: string
      /**
       * @description Status of the user
       * @example OPEN
       * @enum {string}
       */
      accountStatus?:
        | 'OPEN'
        | 'EXPIRED'
        | 'EXPIRED_GRACE'
        | 'LOCKED_TIMED'
        | 'LOCKED'
        | 'EXPIRED_LOCKED_TIMED'
        | 'EXPIRED_GRACE_LOCKED_TIMED'
        | 'EXPIRED_LOCKED'
        | 'EXPIRED_GRACE_LOCKED'
      /**
       * @description Type of user account
       * @example GENERAL
       * @enum {string}
       */
      accountType: 'GENERAL' | 'ADMIN'
      /**
       * @description Email addresses of user
       * @example test@test.com
       */
      primaryEmail?: string
      /** @description List of associated DPS Role Codes */
      dpsRoleCodes: string[]
      /** @description Account is not locked */
      accountNonLocked?: boolean
      /** @description Credentials are not expired flag */
      credentialsNonExpired?: boolean
      /** @description User is enabled flag */
      enabled: boolean
      /** @description User is admin flag */
      admin?: boolean
      /** @description User is active flag */
      active: boolean
      /**
       * @description Staff Status
       * @example ACTIVE
       */
      staffStatus?: string
    }
    /** @description Role Reassignment Specification */
    RoleAssignmentsSpecification: {
      /** @description The caseloads to search for users having roles matching 'nomisRolesToMatch'. */
      caseloads: string[]
      /** @description users within the caseloads will be selected if they have at least one role matching the codes in rolesToMatch. */
      nomisRolesToMatch: string[]
      /** @description Users with the named caseloads, having roles matching nomisRolesToMatch will be assigned these DPS roles */
      dpsRolesToAssign: string[]
      /** @description For each caseload in caseloads; find the users having at least one role matching 'nomisRolesToMatch'. For each matched user at the current caseload remove each of the roles in 'nomisRolesToRemove' at that caseload. */
      nomisRolesToRemove: string[]
    }
    /** @description Role reassignment statistics */
    RoleAssignmentStats: {
      /** @description Caseload */
      caseload: string
      /**
       * Format: int32
       * @description Number of matched users
       */
      numMatchedUsers: number
      /**
       * Format: int64
       * @description Number of role assignments succeeded
       */
      numAssignRoleSucceeded: number
      /**
       * Format: int64
       * @description Number of role assignments failed
       */
      numAssignRoleFailed: number
      /**
       * Format: int64
       * @description Number of role un-assignments succeeded
       */
      numUnassignRoleSucceeded: number
      /**
       * Format: int64
       * @description Number of role un-assignments failed
       */
      numUnassignRoleFailed: number
    }
    /** @description Local Admin User Information creation */
    CreateLocalAdminUserRequest: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description First name of the user, required if linkedUsername is not set
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user, required if linkedUsername is not set
       * @example Smith
       */
      lastName: string
      /**
       * @description Email Address, required if linkedUsername is not set
       * @example test@justice.gov.uk
       */
      email: string
      /**
       * @description Default local admin group (prison) to manage users
       * @example MDI
       */
      localAdminGroup: string
    }
    /** @description Linking local admin account user creation */
    CreateLinkedLocalAdminUserRequest: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description Default local admin group (prison) to manage users
       * @example MDI
       */
      localAdminGroup: string
    }
    /** @description Linking general account user creation */
    CreateLinkedGeneralUserRequest: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description Default caseload (a.k.a Prison ID), not required for admin accounts
       * @example BXI
       */
      defaultCaseloadId: string
    }
    /** @description Linking admin account user creation */
    CreateLinkedAdminUserRequest: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
    }
    /** @description General User Information creation */
    CreateGeneralUserRequest: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description First name of the user, required if linkedUsername is not set
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user, required if linkedUsername is not set
       * @example Smith
       */
      lastName: string
      /**
       * @description Default caseload (a.k.a Prison ID)
       * @example BXI
       */
      defaultCaseloadId: string
      /**
       * @description Email Address, required if linkedUsername is not set
       * @example test@justice.gov.uk
       */
      email: string
    }
    /** @description Admin User Information creation */
    CreateAdminUserRequest: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description First name of the user, required if linkedUsername is not set
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user, required if linkedUsername is not set
       * @example Smith
       */
      lastName: string
      /**
       * @description Email Address, required if linkedUsername is not set
       * @example test@justice.gov.uk
       */
      email: string
    }
    /** @description Role Information creation */
    CreateRoleRequest: {
      /**
       * @description Role Code
       * @example GLOBAL_SEARCH
       */
      code: string
      /**
       * @description Role Name
       * @example Global Search Role
       */
      name: string
      /**
       * Format: int32
       * @description Display Sequence
       * @default 1
       * @example 99
       */
      sequence: number
      /**
       * @description Parent Role Code
       * @example LICENCE_ADMIN
       */
      parentRoleCode?: string
      /**
       * @description Role Type
       * @default APP
       * @example APP
       * @enum {string}
       */
      type: 'APP' | 'INST' | 'COMM'
      /**
       * @description Role Code
       * @default false
       * @example true
       */
      adminRoleOnly: boolean
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    PageUserSummaryWithEmail: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['UserSummaryWithEmail'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      /** Format: int32 */
      pageNumber?: number
      paged?: boolean
      unpaged?: boolean
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    /** @description Summary User Information with Email Address */
    UserSummaryWithEmail: {
      /**
       * @description Username
       * @example testuser1
       */
      username: string
      /**
       * Format: int64
       * @description Staff ID
       * @example 324323
       */
      staffId: number
      /**
       * @description First name of the user
       * @example Mustafa
       */
      firstName: string
      /**
       * @description Last name of the user
       * @example Usmani
       */
      lastName: string
      /**
       * @description Account status indicator
       * @example true
       */
      active: boolean
      /**
       * @description Account status
       * @example OPEN
       * @enum {string}
       */
      status?:
        | 'OPEN'
        | 'EXPIRED'
        | 'EXPIRED_GRACE'
        | 'LOCKED_TIMED'
        | 'LOCKED'
        | 'EXPIRED_LOCKED_TIMED'
        | 'EXPIRED_GRACE_LOCKED_TIMED'
        | 'EXPIRED_LOCKED'
        | 'EXPIRED_GRACE_LOCKED'
      /**
       * @description Indicates that an account is locked.
       * @example false
       */
      locked: boolean
      /**
       * @description Indicates that an account is expired
       * @example false
       */
      expired: boolean
      activeCaseload?: components['schemas']['PrisonCaseload']
      /**
       * Format: int32
       * @description The count of DPS roles allocated to this staff member
       * @example 12
       */
      dpsRoleCount: number
      /**
       * @description Primary email address of user - normally justice.gov.uk one if available otherwise first one in list
       * @example joe.bloggs@justice.gov.uk
       */
      email?: string
      /**
       * @description Staff status
       * @example ACTIVE
       */
      staffStatus?: string
    }
    UserAndEmail: {
      username: string
      email?: string
    }
    /** @description Basic User Information */
    UserBasicDetails: {
      /**
       * @description Username
       * @example testuser1
       */
      username: string
      /**
       * Format: int64
       * @description Staff ID
       * @example 324323
       */
      staffId: number
      /**
       * @description First name of the user
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user
       * @example Smith
       */
      lastName: string
      /**
       * @description Active Caseload of the user
       * @example BXI
       */
      activeCaseloadId?: string
      /** @description User is enabled flag */
      enabled: boolean
      /**
       * @description Status of the user
       * @example OPEN
       */
      accountStatus?: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Unlock user account
   * @description Unlocks the user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
   */
  unlockUser: {
    parameters: {
      path: {
        /**
         * @description Username
         * @example testuser1
         */
        username: string
      }
    }
    responses: {
      /** @description User account unlocked */
      200: {
        content: never
      }
      /** @description Incorrect request to unlock user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to unlock a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Lock user account
   * @description Locks the user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
   */
  lockUser: {
    parameters: {
      path: {
        /**
         * @description Username
         * @example testuser1
         */
        username: string
      }
    }
    responses: {
      /** @description User account locked */
      200: {
        content: never
      }
      /** @description Incorrect request to lock user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to lock a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Set the default caseload for this user
   * @description Sets the default caseload. Caseload must already be present. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
   */
  setDefaultCaseload: {
    parameters: {
      path: {
        /**
         * @description Username to default caseload
         * @example TEST_USER2
         */
        username: string
        /**
         * @description Default caseload Id
         * @example LEI
         */
        defaultCaseloadId: string
      }
    }
    responses: {
      /** @description User information with active caseload details */
      200: {
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** @description Incorrect request to set a default caseload on a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to set a default caseload on a user account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Change password of user account
   * @description Change password of user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
   */
  changePassword: {
    parameters: {
      path: {
        /**
         * @description Username
         * @example testuser1
         */
        username: string
      }
    }
    requestBody: {
      content: {
        'application/json': string
      }
    }
    responses: {
      /** @description User account password changed */
      200: {
        content: never
      }
      /** @description Incorrect request to change password of user. Some specific responses returns a different errorCode that can be checked by the client */
      400: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to change the password a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Change staff name of user account
   * @description Change staff name of user account. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
   */
  changeName: {
    parameters: {
      path: {
        /**
         * @description Username
         * @example TEST_USER1
         */
        username: string
      }
    }
    requestBody: {
      content: {
        'application/json': string
      }
    }
    responses: {
      /** @description User account name changed */
      200: {
        content: {
          'application/json': components['schemas']['StaffDetail']
        }
      }
      /** @description Incorrect request to change name of user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to change the name a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Change email of user account
   * @description Change email of user account. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
   */
  changeEmail: {
    parameters: {
      path: {
        /**
         * @description Username
         * @example TEST_USER1
         */
        username: string
      }
    }
    requestBody: {
      content: {
        'application/json': string
      }
    }
    responses: {
      /** @description User account email changed */
      200: {
        content: {
          'application/json': components['schemas']['StaffDetail']
        }
      }
      /** @description Incorrect request to change email of user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to change the email a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get specified role details
   * @description Information on a specific role. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLES_ADMIN
   */
  getRoleDetails: {
    parameters: {
      path: {
        /**
         * @description Role Code
         * @example GLOBAL_SEARCH
         */
        code: string
      }
    }
    responses: {
      /** @description Role Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['RoleDetail']
        }
      }
      /** @description Incorrect request to get role information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get a role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates a role in NOMIS
   * @description Updates a role. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLES_ADMIN
   */
  updateRole: {
    parameters: {
      path: {
        /**
         * @description Role Code
         * @example GLOBAL_SEARCH
         */
        code: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRoleRequest']
      }
    }
    responses: {
      /** @description Role Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['RoleDetail']
        }
      }
      /** @description Incorrect request to update role information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to update a role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get list of roles associated with the users account
   * @description Roles for a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
   */
  getUserRoles: {
    parameters: {
      query?: {
        /**
         * @description Include NOMIS roles
         * @example false
         */
        'include-nomis-roles'?: string
      }
      path: {
        /**
         * @description Username
         * @example TEST_USER1
         */
        username: string
      }
    }
    responses: {
      /** @description User role list */
      200: {
        content: {
          'application/json': components['schemas']['UserRoleDetail']
        }
      }
      /** @description Incorrect request to get caseloads for a user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get roles for this user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add a role to the specified user account, all roles will be added to DPS caseload unless specified
   * @description Adds a role to a user, user must have caseload (if specified). Default caseload is DPS caseload (NWEB).  Cannot add an existing role to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
   */
  addRoles: {
    parameters: {
      query?: {
        /**
         * @description Caseload Id
         * @example NWEB
         */
        caseloadId?: string
      }
      path: {
        /**
         * @description Username of the account to add roles
         * @example TEST_USER2
         */
        username: string
      }
    }
    requestBody: {
      content: {
        'application/json': string
      }
    }
    responses: {
      /** @description User information with role details */
      201: {
        content: {
          'application/json': components['schemas']['UserRoleDetail']
        }
      }
      /** @description Incorrect request to add a role to a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to add a role to this account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add a role to the specified user account, all roles will be added to DPS caseload unless specified
   * @description Adds a role to a user, user must have caseload (if specified). Default caseload is DPS caseload (NWEB).  Cannot add an existing role to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
   */
  addRole: {
    parameters: {
      query?: {
        /**
         * @description Caseload Id
         * @example NWEB
         */
        caseloadId?: string
      }
      path: {
        /**
         * @description Username of the account to add role
         * @example TEST_USER2
         */
        username: string
        /**
         * @description Role Code
         * @example GLOBAL_SEARCH
         */
        roleCode: string
      }
    }
    responses: {
      /** @description User information with role details */
      201: {
        content: {
          'application/json': components['schemas']['UserRoleDetail']
        }
      }
      /** @description Incorrect request to add a role to a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to add a role to this account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Remove a role from a user
   * @description The user must already have the role to be removed. Default role caseload is a DPS role unless specified. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
   */
  removeRole: {
    parameters: {
      query?: {
        /**
         * @description Caseload Id
         * @example NWEB
         */
        caseloadId?: string
      }
      path: {
        /**
         * @description Username of the account to remove role
         * @example TEST_USER2
         */
        username: string
        /**
         * @description Role Code
         * @example GLOBAL_SEARCH
         */
        roleCode: string
      }
    }
    responses: {
      /** @description User information with role details */
      200: {
        content: {
          'application/json': components['schemas']['UserRoleDetail']
        }
      }
      /** @description Incorrect request to remove a role from a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to remove a role this user account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Record a user as having successfully signed in.
   * @description Record a user as having successfully signed in, with current date and time written to the LAST_LOGON_DATE. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
   */
  recordSignIn: {
    parameters: {
      path: {
        /**
         * @description Username
         * @example testuser1
         */
        username: string
      }
    }
    responses: {
      /** @description User sign in recorded */
      200: {
        content: never
      }
      /** @description Incorrect request to record user sign-in */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to record the user sign-in */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get list of caseloads associated with the users account
   * @description Caseloads for a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
   */
  getUserCaseloads: {
    parameters: {
      path: {
        /**
         * @description Username
         * @example TEST_USER1
         */
        username: string
      }
    }
    responses: {
      /** @description User caseload list */
      200: {
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** @description Incorrect request to get caseloads for a user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get a caseload for a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add multiple caseloads to the specified user account
   * @description Adds caseloads to a user, caseloads must exist. Cannot add an existing caseload to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
   */
  addCaseloads: {
    parameters: {
      path: {
        /**
         * @description Username of the account to add caseloads
         * @example TEST_USER2
         */
        username: string
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description User information with caseload details */
      201: {
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** @description Incorrect request to add caseloads to a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to add caseloads to account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add a caseload to the specified user account
   * @description Adds a caseload to a user, caseload must exist. Cannot add an existing caseload to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
   */
  addCaseload: {
    parameters: {
      path: {
        /**
         * @description Username of the account to add caseload
         * @example TEST_USER2
         */
        username: string
        /**
         * @description Caseload Id
         * @example LEI
         */
        caseloadId: string
      }
    }
    responses: {
      /** @description User information with caseload details */
      201: {
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** @description Incorrect request to add a caseload to a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to add a caseload to account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Remove a caseload from a user
   * @description The user must already have the caseload to be removed. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN
   */
  removeCaseload: {
    parameters: {
      path: {
        /**
         * @description Username to remove caseload from
         * @example TEST_USER2
         */
        username: string
        /**
         * @description Caseload ID to remove from this user
         * @example LEI
         */
        caseloadId: string
      }
    }
    responses: {
      /** @description User information with caseload details */
      200: {
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** @description Incorrect request to remove a caseload from a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to remove a caseload this user account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Authenticate a username and password against NOMIS database */
  authenticate: {
    parameters: {
      path: {
        username: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Authentication']
      }
    }
    responses: {
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Authentication failed. Either no access token was provided or the username / password combination is incorrect */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Find users by their email address
   * @description Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
   */
  findUsersByEmailAddress: {
    parameters: {
      query: {
        /**
         * @description The email to match. Case insensitive
         * @example jim@smith.com
         */
        email: string
      }
    }
    responses: {
      /** @description List of matching users */
      200: {
        content: {
          'application/json': components['schemas']['UserDetail'][]
        }
      }
    }
  }
  /**
   * Find users by their email address and / or list of usernames
   * @description Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
   */
  findUsersByEmailAddressAndUsernames: {
    parameters: {
      query: {
        /**
         * @description The email to match. Case insensitive
         * @example jim@smith.com
         */
        email: string
      }
    }
    requestBody?: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description List of matching users */
      200: {
        content: {
          'application/json': components['schemas']['UserDetail'][]
        }
      }
    }
  }
  /**
   * Bulk removes a role from a group of users
   * @description If the user does not have the role already it is ignored. Any users not found will also be ignored but will not be returned in the response. Only DPS roles are removed on the DPS caseload (NWEB). Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
   */
  bulkRemoveRoles: {
    parameters: {
      path: {
        /**
         * @description Role Code
         * @example GLOBAL_SEARCH
         */
        roleCode: string
      }
    }
    requestBody: {
      content: {
        'application/json': string
      }
    }
    responses: {
      /** @description User information with role details */
      200: {
        content: {
          'application/json': components['schemas']['UserRoleDetail'][]
        }
      }
      /** @description Incorrect request to remove a role from a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to remove a role this user account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Reassign roles from a NOMIS role to a DPS role and removes the NOMIS role if no longer required
   * @description Requires role ROLE_MAINTAIN_ACCESS_ROLES
   */
  reassignRoles: {
    requestBody: {
      content: {
        'application/json': components['schemas']['RoleAssignmentsSpecification']
      }
    }
    responses: {
      /** @description Role update details */
      200: {
        content: {
          'application/json': components['schemas']['RoleAssignmentStats'][]
        }
      }
      /** @description Incorrect request to re-assign a set of roles */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to re-assign a set of roles */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create local admin user account
   * @description Creates local admin user account, oracle schema and staff user information. Requires role ROLE_CREATE_USER
   */
  createLocalAdminUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLocalAdminUserRequest']
      }
    }
    responses: {
      /** @description Local Admin user information returned */
      201: {
        content: {
          'application/json': components['schemas']['UserDetail']
        }
      }
      /** @description Incorrect request to create user information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to create a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Link a local admin user account to an existing general account.
   * @description Can only be linked to an general account. Can only be linked to an account that doesn't already have one admin account. Requires role ROLE_CREATE_USER
   */
  linkLocalAdminAccount: {
    parameters: {
      path: {
        /**
         * @description Attach account to an existing general user account
         * @example testuser2
         */
        linkedUsername: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLinkedLocalAdminUserRequest']
      }
    }
    responses: {
      /** @description Staff local admin account information returned */
      201: {
        content: {
          'application/json': components['schemas']['StaffDetail']
        }
      }
      /** @description Incorrect request to link local admin account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to link a local admin account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Link a general user account to an existing admin account.
   * @description Can only be linked to an admin account. Can only be linked to an account that doesn't already have one general account. Requires role ROLE_CREATE_USER
   */
  linkGeneralAccount: {
    parameters: {
      path: {
        /**
         * @description Attach account to an existing admin user account
         * @example testuser2
         */
        linkedUsername: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLinkedGeneralUserRequest']
      }
    }
    responses: {
      /** @description Staff account information returned */
      201: {
        content: {
          'application/json': components['schemas']['StaffDetail']
        }
      }
      /** @description Incorrect request to link general account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to link a general account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Link an admin account to an existing general account.
   * @description Can only be linked to an general account. Can only be linked to an account that doesn't already have one Admin account. Requires role ROLE_CREATE_USER
   */
  linkAdminAccount: {
    parameters: {
      path: {
        /**
         * @description Attach account to an existing general account
         * @example testuser2
         */
        linkedUsername: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLinkedAdminUserRequest']
      }
    }
    responses: {
      /** @description Staff account information returned */
      201: {
        content: {
          'application/json': components['schemas']['StaffDetail']
        }
      }
      /** @description Incorrect request to link admin account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to link an admin account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create general user account
   * @description Creates general user account, oracle schema and staff user information. Requires role ROLE_CREATE_USER
   */
  createGeneralUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGeneralUserRequest']
      }
    }
    responses: {
      /** @description General user information returned */
      201: {
        content: {
          'application/json': components['schemas']['UserDetail']
        }
      }
      /** @description Incorrect request to create user information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to create a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create admin user account
   * @description Creates admin user account, oracle schema and staff user information. Requires role ROLE_CREATE_USER
   */
  createAdminUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAdminUserRequest']
      }
    }
    responses: {
      /** @description Admin user account information returned */
      201: {
        content: {
          'application/json': components['schemas']['UserDetail']
        }
      }
      /** @description Incorrect request to create user information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to create a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Bulk add a role to a group of users
   * @description If the user has this role already it is ignored. Any users not found will also be ignored but will not be returned in the response. Only DPS roles are added to the DPS caseload (NWEB). Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
   */
  bulkAddRoles: {
    parameters: {
      path: {
        /**
         * @description Role Code
         * @example GLOBAL_SEARCH
         */
        roleCode: string
      }
    }
    requestBody: {
      content: {
        'application/json': string
      }
    }
    responses: {
      /** @description User information with role details */
      200: {
        content: {
          'application/json': components['schemas']['UserRoleDetail'][]
        }
      }
      /** @description Incorrect request to add a role from a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to add a role this user account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get all roles
   * @description Information on a list of roles. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN, ROLE_MAINTAIN_ACCESS_ROLES or ROLES_ADMIN
   */
  getAllRoles: {
    parameters: {
      query?: {
        /**
         * @description Get all roles, which includes both DPS and NOMIS roles
         * @example true
         */
        'all-roles'?: boolean
        /**
         * @description Include DPS roles that can only be allocated by Central Admin
         * @example true
         */
        'admin-roles'?: boolean
      }
    }
    responses: {
      /** @description Role Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['RoleDetail'][]
        }
      }
      /** @description Incorrect request to get role information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get a list of roles */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create a role in NOMIS
   * @description Creates a role. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLES_ADMIN
   */
  createRole: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRoleRequest']
      }
    }
    responses: {
      /** @description Role Information Returned */
      201: {
        content: {
          'application/json': components['schemas']['RoleDetail']
        }
      }
      /** @description Incorrect request to create role information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to create a role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get all users filtered as specified
   * @description Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES. <br/>Get all users with filter.<br/> For local administrators this will implicitly filter users in the prisons they administer, therefore username is expected in the authorisation token. <br/>For users with role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN this allows access to all staff.
   */
  getUsers: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by name (first name and/or last name in any order), username or email address.
         * @example Raj
         */
        nameFilter?: string
        /**
         * @description Filter will match users that have all DPS role specified
         * @example ADD_SENSITIVE_CASE_NOTES
         */
        accessRoles?: string[]
        /**
         * @description Filter will match users that have the NOMIS role specified, should be used with a caseloadId or will get duplicates
         * @example 201
         */
        nomisRole?: string
        /**
         * @description Limit to active / inactive / show all users
         * @example INACTIVE
         */
        status?: 'ALL' | 'ACTIVE' | 'INACTIVE'
        /**
         * @description Filter results by user's currently active caseload i.e. the one they have currently selected
         * @example MDI
         */
        activeCaseload?: string
        /**
         * @description Filter results to include only those users that have access to the specified caseload (irrespective of whether it is currently active or not
         * @example MDI
         */
        caseload?: string
        /**
         * @description Returns result inclusive of selected roles
         * @example true
         */
        inclusiveRoles?: boolean
        /**
         * @description Returns all active LSAs
         * @example true
         */
        showOnlyLSAs?: boolean
      }
    }
    responses: {
      /** @description Pageable list of user summaries */
      200: {
        content: {
          'application/json': components['schemas']['PageUserSummaryWithEmail']
        }
      }
      /** @description Incorrect filter supplied */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get specified user details
   * @description Information on a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES or ROLE_MANAGE_NOMIS_USER_ACCOUNT
   */
  getUserDetails: {
    parameters: {
      path: {
        /**
         * @description Username
         * @example testuser1
         */
        username: string
      }
    }
    responses: {
      /** @description User Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['UserDetail']
        }
      }
      /** @description Incorrect request to get user information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Find users by first and last names
   * @description Requires role ROLE_USE_OF_FORCE or ROLE_STAFF_SEARCH
   */
  findUsersByFirstAndLastNames: {
    parameters: {
      query: {
        /**
         * @description The first name to match. Case insensitive.
         * @example Fred
         */
        firstName: string
        /**
         * @description The last name to match. Case insensitive
         * @example Bloggs
         */
        lastName: string
      }
    }
    responses: {
      /** @description List of matching users */
      200: {
        content: {
          'application/json': components['schemas']['UserSummaryWithEmail'][]
        }
      }
    }
  }
  /**
   * Get specified staff details
   * @description Will display general and admin user account if setup.  Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES
   */
  getUserDetailsByStaffId: {
    parameters: {
      path: {
        /**
         * @description Staff ID
         * @example 234232
         */
        staffId: string
      }
    }
    responses: {
      /** @description Staff Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['StaffDetail']
        }
      }
      /** @description Incorrect request to get staff information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get a staff user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get all users
   * @description Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT
   */
  findUsersAndEmails: {
    responses: {
      /** @description List of usernames and their email addresses */
      200: {
        content: {
          'application/json': components['schemas']['UserAndEmail'][]
        }
      }
    }
  }
  downloadUsersByFilters: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by name (first name and/or last name in any order), username or email address.
         * @example Raj
         */
        nameFilter?: string
        /**
         * @description Filter will match users that have all DPS role specified
         * @example ADD_SENSITIVE_CASE_NOTES
         */
        accessRoles?: string[]
        /**
         * @description Filter will match users that have the NOMIS role specified, should be used with a caseloadId or will get duplicates
         * @example 201
         */
        nomisRole?: string
        /**
         * @description Limit to active / inactive / show all users
         * @example INACTIVE
         */
        status?: 'ALL' | 'ACTIVE' | 'INACTIVE'
        /**
         * @description Filter results by user's currently active caseload i.e. the one they have currently selected
         * @example MDI
         */
        activeCaseload?: string
        /**
         * @description Filter results to include only those users that have access to the specified caseload (irrespective of whether it is currently active or not
         * @example MDI
         */
        caseload?: string
        /**
         * @description Returns result inclusive of selected roles
         * @example true
         */
        inclusiveRoles?: boolean
        /**
         * @description Returns all active LSAs
         * @example true
         */
        showOnlyLSAs?: boolean
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['UserSummaryWithEmail'][]
        }
      }
    }
  }
  /**
   * Get user basic details
   * @description Information on a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES or ROLE_MANAGE_NOMIS_USER_ACCOUNT
   */
  getUserBasicDetailsInfo: {
    parameters: {
      path: {
        /**
         * @description Username
         * @example testuser1
         */
        username: string
      }
    }
    responses: {
      /** @description User Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['UserBasicDetails']
        }
      }
      /** @description Incorrect request to get user information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description user not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieves all caseloads
   * @description Retrieves all the current active general caseloads, these are effectively prisons that staff can be associated with
   */
  getCaseload: {
    responses: {
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get user details in context
   * @description Information on a specific user.
   */
  getMyUserDetails: {
    responses: {
      /** @description User Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['UserDetail']
        }
      }
      /** @description Incorrect request to get user information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get list of roles associated with the users account
   * @description Roles for a specific user in context
   */
  getMyRoles: {
    parameters: {
      query?: {
        /**
         * @description Include NOMIS roles
         * @example false
         */
        'include-nomis-roles'?: string
      }
    }
    responses: {
      /** @description User role list */
      200: {
        content: {
          'application/json': components['schemas']['UserRoleDetail']
        }
      }
      /** @description Incorrect request to get caseloads for a user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get roles for this user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get list of caseloads associated with the current user
   * @description Caseloads for the current user
   */
  getMyCaseloads: {
    responses: {
      /** @description User caseload list */
      200: {
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** @description Incorrect request to get caseloads for a user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get a caseload for a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
